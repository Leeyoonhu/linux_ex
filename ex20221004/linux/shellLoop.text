** 반복문 **

* for ~ in 문
    - 변수에 각각의 값을 넣은 후 do 안에 있는 '반복할 문장' 을 실행 => 값의 갯수만큼 반복 실행
    - 형식 :
        for 변수 in 값1 값2 값3 ...
        do
            반복할 문장
        done

    ex) $ gedit forEx.sh
        -- 작성 --
            #!/bin/sh
            sum=0
            for i in 1 2 3 4 5 6 7 8 9 10
            do
                sum=`expr $sum + $i`
            done
            echo "1부터 10까지의 합 : " $sum

            exit 0
        -- 작성 완료 --
        $ sh forEx.sh 실행

    ex) 현재 디렉터리에 있는 shell script file(*.sh)의 이름과 앞 3행 출력하기
        $ gedit forEx1.sh     
        -- 작성 --
            #!/bin/sh

            for fname in $(ls *.sh)
            do
                echo " ------ $fname ------ "
                head -3 $fname
            done

            exit 0
        -- 작성 완료 --
        $ sh forEx1.sh 실행


* while 문
    - while 문은 조건식이 참인 경우, 무한 반복 실행
    - 조건식 위치에 [ 1 ] 또는 [ : ] 이 오면 항상 참
    
    ex) 무한 반복 실행문, ctrl + c 로 강제종료할 것
        $ gedit whileTest01.sh
            -- 작성 --
                #!/bin/sh
                while [ 1 ]
                do
                echo "hello world"
                done
                exit 0
            -- 작성 완료 --
        $ sh whileTest01.sh 실행 // ctrl+c 로 종료

    ex) 1부터 10까지 합계를 출력
        $ gedit whileTest02.sh
            -- 작성 --
                #!/bin/sh
                sum=0
                i=0
                while [ $i -le 10 ]
                do
                sum=`expr $sum + $i`
                i=`expr $i + 1`
                done
                echo "1부터 10까지의 합 : " $sum

                exit 0
            -- 작성 완료 --
        $ sh whileTest02.sh 실행 (i가 0부터 10보다 클때까지 1씩 더함)


    ex) 비밀번호 입력하기 
        $ gedit whileTest03.sh
            -- 작성 --
                #!/bin/sh
                echo "비밀번호를 입력하세요"
                read password
                while [ $password != "1234" ]
                do
                echo " 틀렸음. 다시 입력하세요~ "
                read password
                done
                echo " 맞았음. 통과~ "
                exit 0
            -- 작성 완료 --
        $ sh whileTest03.sh 실행 (비밀번호 1234 맞을때까지 실행)


    ex) while 문에서의 break, continue
        $ gedit bceEx.sh
            -- 작성 --
                #!/bin/sh
                echo "무한 반복 입력 시작 (b:break, c:continue, e:exit)"
                while [ 1 ] ;
                do
                read input
                case $input in
                    b|B)
                    break;;
                    c|C)
                    echo "continue를 누르면 while 조건으로 돌아감~"
                    continue;;
                    e|E)
                    echo "exit를 누르면 프로그램을 완전히 종료함"
                    exit 1;;
                esac;
                
                done 
                echo "break를 누르면 while을 빠져나와 지금 문장이 보여용"
                exit 0
            -- 작성 완료 --
            $ sh bceEx.sh 로 실행


* shell script 응용 기능 (function)
    - 사용자 정의 함수 (사용자가 함수를 작성하고 호출)
    - 형식 :
        함수명 ( ) { -- 함수 정의
            내용
        }
        함수명 -- 함수 호출

    ex) 작성한 함수 호출하기
        $ gedit funcEx1.sh
            -- 작성 --
                #!/bin/sh

                myFunc(){
                echo "함수 안으로 들어옴"
                return
                }
                echo "프로그램을 시작함"
                myFunc
                echo "프로그램을 종료함"

                exit 0
            -- 작성 완료 --
        $ sh funcEx1.sh 로 실행



* 함수의 parameter 사용
    - 형식 :
        함수명 ( ) {  -- 함수 정의
            $1, $2, $3...
        }
        함수명 $1값 $2값 $3값... -- 함수 호출

    ex) 함수의 파라미터 예시
        $ gedit funcEx2.sh
            -- 작성 --
                #!/bin/sh
                sum(){
                echo `expr $1 + $2`
                }
                echo "10 더하기 20을 실행 ...."
                sum 10 20

                exit 0
            -- 작성 완료 --
        $ sh funcEx2.sh 실행


* eval 함수
    - 문자열을 명령문으로 인식하여 실행
    
    ex) 이전에 작성한 funcEx2.sh 의 정보를 보여주는 eval
        $ gedit evalEx.sh
            -- 작성 --
                #!/bin/sh
                str="ls -l funcEx2.sh"
                echo $str
                eval $str

                exit 0
            -- 작성 완료 --
        $ sh evalEx.sh 실행
        // 작성한 str 문자열을 명령문으로 변환 eval


* export 
    - 특정 변수(외부 변수)를 전역 변수로 만들어 모든 shell 에서 사용
    
    ex) $ gedit exp1.sh  $ gedit exp2.sh
    // exp1.sh 는 var1, var2 변수만 출력
    // exp2.sh 는 var1, var2 선언 후 호출
    
        * exp1.sh *
        -- 작성 --
            #!/bin/sh
            echo $var1
            echo $var2
            exit 0
        -- 작성 완료 --

        * exp2.sh *
        -- 작성 --
            #!/bin/sh
            var1="지역 변수"
            export var2="외부 변수"
            sh exp1.sh
            exit 0
        -- 작성 완료 --
        $ sh exp2.sh 실행
        // export var2를 통해 var2가 전역변수 처리되어 exp1.sh 에 값이 들어갔음
        // 따라서 "외부 변수" 만 출력됨


* set과 $(명령)
    - 리눅스 명령을 결과로 사용하려면 '$(명령)' 형식 이용
    - 결과를 parameter로 사용하려면 set 명령어 이용

        ex) 명령 스크립트 작성
            $ gedit setEx.sh
                -- 작성 --
                    #!/bin/sh
                    echo "오늘 날짜는 $(date)입니다."
                    set $(date)
                    echo "오늘은 $4요일 입니다."
                    exit 0
                -- 작성 완료 --
            $ sh setEx.sh
            // 4번째 parameter인 요일을 가져옴
            
